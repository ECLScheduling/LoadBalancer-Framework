#pragma once

#include "traits.h"
#include <omp.h>

#define OMP_RTS_INCLUDED

namespace MOGSLib { namespace RTS {

/**
 *  @class OpenMP
 *  @brief Abstraction of the OpenMP runtime system functionalities, types and API.
 */
struct OpenMP {

  /// @brief Id type is defined by an external Traits structure.
  using Id = typename LibGOMPTraits::Id;
  /// @brief Load type is defined by an external Traits structure.
  using Load = typename LibGOMPTraits::Load;

  static unsigned chunks;
  static unsigned threads;

  /**
   *  @brief Set the amount of chunks generated by the OpenMP runtime.
   *  @param nchunks The amount of chunks.
   *
   *  @details This method is designed to be called by the MOGSLib OpenMP connection layer.
   */
  static inline void nchunks(const unsigned &nchunks) { chunks = nchunks; }

  /**
   *  @brief Set the amount of threads generated by the OpenMP runtime.
   *  @param nthreads The amount of running threads managed by OpenMP.
   *
   *  @details This method is designed to be called by the MOGSLib OpenMP connection layer.
   */
  static inline void nthreads(const unsigned &nthreads) { threads = nthreads; }

  /**
   *  @brief Inform OpenMP of the number of iterations for the next loop that MOGSLib will schedule.
   *  @param n The iteration count.
   *  @details This method is designed to be called by the context when preparing for the scheduler call.
   */
  static inline void set_iteration_count(const unsigned &n) { omp_set_ntasks(n); }
};

}}